/*****************************************************************//**
 * Generated by Morse IDL to UE Translator.
 * @file   ROSPoseWithCovariance.h
 * @brief  File containing data structures and the definition of the message generated from the IDL.
 *         Idl Type : ROSPoseWithCovariance.idl
 *         
 * @author Nicolas B.
 * @date   December 2023
 * @copyright Copyright 2023 Nicolas Brugie. All rights reserved.
 *********************************************************************/

#pragma once 
#include "CoreMinimal.h" 
#include "Topic/TopicProxy.h"
#include "Utils/ConvertUtils.h"


#include "geometry_msgs/msg/PoseWithCovariance.h"
#include "GeometryMsgs/Msg/ROSPose.h"

#include "ROSPoseWithCovariance.generated.h" 







/** @addtogroup {NameDoxygenMessageContainer}
  * @brief {NameDoxygenMessageContainer}
  *
  * @{
  */
USTRUCT(Blueprintable)
struct FROSPoseWithCovariance
{
    GENERATED_BODY()

public:
    /**
    * @cond
    */
    FROSPoseWithCovariance()
    {

    };
    /**
     * @endcond
     */

    
    UPROPERTY(EditAnywhere)
    FROSPose Pose;
    
    UPROPERTY(EditAnywhere)
    TArray<double> Covariance;
    

    /**
     * @cond
     */
    void DDSToUE (const geometry_msgs_msg_PoseWithCovariance& InData) 
    {
        Pose.DDSToUE(InData.pose);
        ConvertUtils::SequenceToTArray<double, double>(InData.covariance, Covariance, 36);
    };

    void UEToDDS (geometry_msgs_msg_PoseWithCovariance& OutData) 
    {
        Pose.UEToDDS(OutData.pose);
        ConvertUtils::TArrayToSequence<double, double>(Covariance,OutData.covariance, 36);
    };
    
    /**
     * @endcond
     */
};
/** @} */



DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FROSPoseWithCovarianceCallback, const FROSPoseWithCovariance, Data);

UCLASS(BlueprintType, Blueprintable)
class MORSEROSDATAMODEL_API UPoseWithCovariance_TopicProxy : public UTopicProxy
{
    GENERATED_BODY()

public:

    UPROPERTY(BlueprintAssignable)
    FROSPoseWithCovarianceCallback OnDataChanged;

    virtual void Initialize() override {
        Data = geometry_msgs_msg_PoseWithCovariance__alloc();
    };

    virtual void Terminate() override {
        geometry_msgs_msg_PoseWithCovariance_free(Data, DDS_FREE_ALL);
    };

    UFUNCTION(BlueprintCallable)
    void GetData(FROSPoseWithCovariance& Output)
    {
        Output.DDSToUE(*Data);
    };

    UFUNCTION(BlueprintCallable)
    void SetData(FROSPoseWithCovariance Input)
    {
        Input.UEToDDS(*Data);
    };

    virtual void ExecuteMessageCallback() override
    {
        FROSPoseWithCovariance NewData;
        NewData.DDSToUE(*Data);
        OnDataChanged.Broadcast(NewData);
    };

    virtual void* Get() override
    {
        return Data;
    };

    virtual const dds_topic_descriptor_t* GetTypeDesc() override
    {
        return &geometry_msgs_msg_PoseWithCovariance_desc;
    };

private:
    geometry_msgs_msg_PoseWithCovariance* Data;
};