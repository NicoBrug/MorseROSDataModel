/*****************************************************************//**
 * Generated by Morse IDL to UE Translator.
 * @file   ROSCameraInfo.h
 * @brief  File containing data structures and the definition of the message generated from the IDL.
 *         Idl Type : ROSCameraInfo.idl
 *         
 * @author Nicolas B.
 * @date   December 2023
 * @copyright Copyright 2023 Nicolas Brugie. All rights reserved.
 *********************************************************************/

#pragma once 
#include "CoreMinimal.h" 
#include "Topic/TopicProxy.h"
#include "Utils/ConvertUtils.h"


#include "sensor_msgs/msg/CameraInfo.h"

#include "SensorMsgs/Msg/ROSRegionOfInterest.h"
#include "StdMsgs/Msg/ROSHeader.h"

#include "ROSCameraInfo.generated.h" 







/** @addtogroup {NameDoxygenMessageContainer}
  * @brief {NameDoxygenMessageContainer}
  *
  * @{
  */
USTRUCT(Blueprintable)
struct FROSCameraInfo
{
    GENERATED_BODY()

public:
    /**
    * @cond
    */
    FROSCameraInfo()
    {
        K.SetNumZeroed(9);
        R.SetNumZeroed(9);
        P.SetNumZeroed(9);
    };
    /**
     * @endcond
     */

    
    UPROPERTY(EditAnywhere)
    FROSHeader Header;
    
    UPROPERTY(EditAnywhere)
    unsigned int Height;
    
    UPROPERTY(EditAnywhere)
    unsigned int Width;
    
    UPROPERTY(EditAnywhere)
    FString DistortionModel;
    
    UPROPERTY(EditAnywhere)
    TArray<double> D;
    
    UPROPERTY(EditAnywhere)
    TArray<double> K;
    
    UPROPERTY(EditAnywhere)
    TArray<double> R;
    
    UPROPERTY(EditAnywhere)
    TArray<double> P;
    
    UPROPERTY(EditAnywhere)
    unsigned int BinningX;
    
    UPROPERTY(EditAnywhere)
    unsigned int BinningY;
    
    UPROPERTY(EditAnywhere)
    FROSRegionOfInterest Roi;
    

    /**
     * @cond
     */
    void DDSToUE (const sensor_msgs_msg_CameraInfo& InData) 
    {
        Header.DDSToUE(InData.header);
        Height = InData.height;
        Width = InData.width;
        ConvertUtils::DDSStringToUE( InData.distortion_model, DistortionModel);
        ConvertUtils::SequenceToTArray<double, double>(InData.d._buffer, D, InData.d._length);
        ConvertUtils::SequenceToTArray<double, double>(InData.k, K, 9);
        ConvertUtils::SequenceToTArray<double, double>(InData.r, R, 9);
        ConvertUtils::SequenceToTArray<double, double>(InData.p, P, 9);
        BinningX = InData.binning_x;
        BinningY = InData.binning_y;
        Roi.DDSToUE(InData.roi);
    };

    void UEToDDS (sensor_msgs_msg_CameraInfo& OutData) 
    {
        Header.UEToDDS(OutData.header);
        OutData.height = Height;
        OutData.width = Width;
        ConvertUtils::UEStringToDDS(DistortionModel, OutData.distortion_model );
        OutData.d._length = D.Num();
        OutData.d._buffer = dds_sequence_double_allocbuf(D.Num());
        OutData.d._release = true;
        ConvertUtils::TArrayToSequence<double, double>(D, OutData.d._buffer, D.Num());
        ConvertUtils::TArrayToSequence<double, double>(K,OutData.k, 9);
        ConvertUtils::TArrayToSequence<double, double>(R,OutData.r, 9);
        ConvertUtils::TArrayToSequence<double, double>(P,OutData.p, 9);
        OutData.binning_x = BinningX;
        OutData.binning_y = BinningY;
        Roi.UEToDDS(OutData.roi);
    };
    
    /**
     * @endcond
     */
};
/** @} */



DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FROSCameraInfoCallback, const FROSCameraInfo, Data);

UCLASS(BlueprintType, Blueprintable)
class MORSEROSDATAMODEL_API UCameraInfo_TopicProxy : public UTopicProxy
{
    GENERATED_BODY()

public:

    UPROPERTY(BlueprintAssignable)
    FROSCameraInfoCallback OnDataChanged;

    virtual void Initialize() override {
        Data = sensor_msgs_msg_CameraInfo__alloc();
    };

    virtual void Terminate() override {
        sensor_msgs_msg_CameraInfo_free(Data, DDS_FREE_ALL);
    };

    UFUNCTION(BlueprintCallable)
    void GetData(FROSCameraInfo& Output)
    {
        Output.DDSToUE(*Data);
    };

    UFUNCTION(BlueprintCallable)
    void SetData(FROSCameraInfo Input)
    {
        Input.UEToDDS(*Data);
    };

    virtual void ExecuteMessageCallback() override
    {
        FROSCameraInfo NewData;
        NewData.DDSToUE(*Data);
        OnDataChanged.Broadcast(NewData);
    };

    virtual void* Get() override
    {
        return Data;
    };

    virtual const dds_topic_descriptor_t* GetTypeDesc() override
    {
        return &sensor_msgs_msg_CameraInfo_desc;
    };

private:
    sensor_msgs_msg_CameraInfo* Data;
};