/*****************************************************************//**
 * Generated by Morse IDL to UE Translator.
 * @file   ROSImage.h
 * @brief  File containing data structures and the definition of the message generated from the IDL.
 *         Idl Type : ROSImage.idl
 *         
 * @author Nicolas B.
 * @date   December 2023
 * @copyright Copyright 2023 Nicolas Brugie. All rights reserved.
 *********************************************************************/

#pragma once 
#include "CoreMinimal.h" 
#include "Topic/TopicProxy.h"
#include "Utils/ConvertUtils.h"


#include "sensor_msgs/msg/Image.h"

#include "StdMsgs/Msg/ROSHeader.h"

#include "ROSImage.generated.h" 





/** @addtogroup {NameDoxygenMessageContainer}
  * @brief {NameDoxygenMessageContainer}
  *
  * @{
  */
USTRUCT(Blueprintable)
struct FROSImage
{
    GENERATED_BODY()

public:
    /**
    * @cond
    */
    FROSImage()
    {

    };
    /**
     * @endcond
     */

    
    UPROPERTY(EditAnywhere)
    FROSHeader Header;
    
    UPROPERTY(EditAnywhere)
    unsigned int Height;
    
    UPROPERTY(EditAnywhere)
    unsigned int Width;
    
    UPROPERTY(EditAnywhere)
    FString Encoding;
    
    UPROPERTY(EditAnywhere)
    uint8 IsBigendian;
    
    UPROPERTY(EditAnywhere)
    unsigned int Step;
    
    TArray<uint8> Data;
    

    /**
     * @cond
     */
    void DDSToUE (const sensor_msgs_msg_Image& InData) 
    {
        Header.DDSToUE(InData.header);
        Height = InData.height;
        Width = InData.width;
        ConvertUtils::DDSStringToUE( InData.encoding, Encoding);
        IsBigendian = InData.is_bigendian;
        Step = InData.step;
        ConvertUtils::SequenceToTArray<uint8, uint8>(InData.data._buffer, Data, InData.data._length);
    };

    void UEToDDS (sensor_msgs_msg_Image& OutData) 
    {
        Header.UEToDDS(OutData.header);
        OutData.height = Height;
        OutData.width = Width;
        ConvertUtils::UEStringToDDS(Encoding, OutData.encoding );
        OutData.is_bigendian = IsBigendian;
        OutData.step = Step;
        OutData.data._length = Data.Num();
        OutData.data._buffer = dds_sequence_uint8_allocbuf(Data.Num());
        OutData.data._release = true;
        ConvertUtils::TArrayToSequence<uint8, uint8>(Data, OutData.data._buffer, Data.Num());
    };
    
    /**
     * @endcond
     */
};
/** @} */



DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FROSImageCallback, const FROSImage, Data);

UCLASS(BlueprintType, Blueprintable)
class MORSEROSDATAMODEL_API UImage_TopicProxy : public UTopicProxy
{
    GENERATED_BODY()

public:

    UPROPERTY(BlueprintAssignable)
    FROSImageCallback OnDataChanged;

    virtual void Initialize() override {
        Data = sensor_msgs_msg_Image__alloc();
    };

    virtual void Terminate() override {
        sensor_msgs_msg_Image_free(Data, DDS_FREE_ALL);
    };

    UFUNCTION(BlueprintCallable)
    void GetData(FROSImage& Output)
    {
        Output.DDSToUE(*Data);
    };

    UFUNCTION(BlueprintCallable)
    void SetData(FROSImage Input)
    {
        Input.UEToDDS(*Data);
    };

    virtual void ExecuteMessageCallback() override
    {
        FROSImage NewData;
        NewData.DDSToUE(*Data);
        OnDataChanged.Broadcast(NewData);
    };

    virtual void* Get() override
    {
        return Data;
    };

    virtual const dds_topic_descriptor_t* GetTypeDesc() override
    {
        return &sensor_msgs_msg_Image_desc;
    };

private:
    sensor_msgs_msg_Image* Data;
};