/*****************************************************************//**
 * Generated by Morse IDL to UE Translator.
 * @file   ROSImu.h
 * @brief  File containing data structures and the definition of the message generated from the IDL.
 *         Idl Type : ROSImu.idl
 *         
 * @author Nicolas B.
 * @date   December 2023
 * @copyright Copyright 2023 Nicolas Brugie. All rights reserved.
 *********************************************************************/

#pragma once 
#include "CoreMinimal.h" 
#include "Topic/TopicProxy.h"
#include "Utils/ConvertUtils.h"

#include "sensor_msgs/msg/Imu.h"

#include "StdMsgs/Msg/ROSHeader.h"

#include "ROSImu.generated.h" 





/** @addtogroup {NameDoxygenMessageContainer}
  * @brief {NameDoxygenMessageContainer}
  *
  * @{
  */
USTRUCT(Blueprintable)
struct FROSImu
{
    GENERATED_BODY()

public:
    /**
    * @cond
    */
    FROSImu()
    {
        OrientationCovariance.SetNumZeroed(9);
        AngularVelocityCovariance.SetNumZeroed(9);
        LinearAccelerationCovariance.SetNumZeroed(9);
    };
    /**
     * @endcond
     */

    
    UPROPERTY(EditAnywhere)
    FROSHeader Header;
    
    UPROPERTY(EditAnywhere)
    FQuat Orientation;
    
    UPROPERTY(EditAnywhere)
    TArray<double> OrientationCovariance;
    
    UPROPERTY(EditAnywhere)
    FVector AngularVelocity;
    
    UPROPERTY(EditAnywhere)
    TArray<double> AngularVelocityCovariance;
    
    UPROPERTY(EditAnywhere)
    FVector LinearAcceleration;
    
    UPROPERTY(EditAnywhere)
    TArray<double> LinearAccelerationCovariance;
    

    /**
     * @cond
     */
    void DDSToUE (const sensor_msgs_msg_Imu& InData) 
    {
        
        Header.DDSToUE(InData.header);
        ConvertUtils::DDSQuaternionToUE(InData.orientation, Orientation);
        ConvertUtils::SequenceToTArray<double, double>(InData.orientation_covariance, OrientationCovariance, 9);
        ConvertUtils::DDSVectorToUE(InData.angular_velocity, AngularVelocity);
        ConvertUtils::SequenceToTArray<double, double>(InData.angular_velocity_covariance, AngularVelocityCovariance, 9);
        ConvertUtils::DDSVectorToUE(InData.linear_acceleration, LinearAcceleration);
        ConvertUtils::SequenceToTArray<double, double>(InData.linear_acceleration_covariance, LinearAccelerationCovariance, 9);
    };

    void UEToDDS (sensor_msgs_msg_Imu& OutData) 
    {
        Header.UEToDDS(OutData.header);
        ConvertUtils::UEQuaternionToDDS(Orientation, OutData.orientation);
        ConvertUtils::TArrayToSequence<double, double>(OrientationCovariance,OutData.orientation_covariance, 9);
        ConvertUtils::UEVectorToDDS(AngularVelocity,OutData.angular_velocity);
        ConvertUtils::TArrayToSequence<double, double>(AngularVelocityCovariance, OutData.angular_velocity_covariance, 9);
        ConvertUtils::UEVectorToDDS(LinearAcceleration, OutData.linear_acceleration);
        ConvertUtils::TArrayToSequence<double, double>(LinearAccelerationCovariance, OutData.linear_acceleration_covariance, 9);
    };
    
    /**
     * @endcond
     */
};
/** @} */



DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FROSImuCallback, const FROSImu, Data);

UCLASS(BlueprintType, Blueprintable)
class MORSEROSDATAMODEL_API UImu_TopicProxy : public UTopicProxy
{
    GENERATED_BODY()

public:

    UPROPERTY(BlueprintAssignable)
    FROSImuCallback OnDataChanged;

    virtual void Initialize() override {
        Data = sensor_msgs_msg_Imu__alloc();
    };

    virtual void Terminate() override {
        sensor_msgs_msg_Imu_free(Data, DDS_FREE_ALL);
    };

    UFUNCTION(BlueprintCallable)
    void GetData(FROSImu& Output)
    {
        Output.DDSToUE(*Data);
    };

    UFUNCTION(BlueprintCallable)
    void SetData(FROSImu Input)
    {
        Input.UEToDDS(*Data);
    };

    virtual void ExecuteMessageCallback() override
    {
        FROSImu NewData;
        NewData.DDSToUE(*Data);
        OnDataChanged.Broadcast(NewData);
    };

    virtual void* Get() override
    {
        return Data;
    };

    virtual const dds_topic_descriptor_t* GetTypeDesc() override
    {
        return &sensor_msgs_msg_Imu_desc;
    };

private:
    sensor_msgs_msg_Imu* Data;
};