/*****************************************************************//**
 * Generated by Morse IDL to UE Translator.
 * @file   ROSLaserScan.h
 * @brief  File containing data structures and the definition of the message generated from the IDL.
 *         Idl Type : ROSLaserScan.idl
 *         
 * @author Nicolas B.
 * @date   December 2023
 * @copyright Copyright 2023 Nicolas Brugie. All rights reserved.
 *********************************************************************/

#pragma once 
#include "CoreMinimal.h" 
#include "Topic/TopicProxy.h"
#include "Utils/ConvertUtils.h"


#include "sensor_msgs/msg/LaserScan.h"

#include "StdMsgs/Msg/ROSHeader.h"

#include "ROSLaserScan.generated.h" 




/** @addtogroup {NameDoxygenMessageContainer}
  * @brief {NameDoxygenMessageContainer}
  *
  * @{
  */
USTRUCT(Blueprintable)
struct FROSLaserScan
{
    GENERATED_BODY()

public:
    /**
    * @cond
    */
    FROSLaserScan()
    {

    };
    /**
     * @endcond
     */

    
    UPROPERTY(EditAnywhere)
    FROSHeader Header;
    
    UPROPERTY(EditAnywhere)
    float AngleMin;
    
    UPROPERTY(EditAnywhere)
    float AngleMax;
    
    UPROPERTY(EditAnywhere)
    float AngleIncrement;
    
    UPROPERTY(EditAnywhere)
    float TimeIncrement;
    
    UPROPERTY(EditAnywhere)
    float ScanTime;
    
    UPROPERTY(EditAnywhere)
    float RangeMin;
    
    UPROPERTY(EditAnywhere)
    float RangeMax;
    
    UPROPERTY(EditAnywhere)
    TArray<float> Ranges;
    
    UPROPERTY(EditAnywhere)
    TArray<float> Intensities;
    

    /**
     * @cond
     */
    void DDSToUE (const sensor_msgs_msg_LaserScan& InData) 
    {
        Header.DDSToUE(InData.header);
        AngleMin = InData.angle_min;
        AngleMax = InData.angle_max;
        AngleIncrement = InData.angle_increment;
        TimeIncrement = InData.time_increment;
        ScanTime = InData.scan_time;
        RangeMin = InData.range_min;
        RangeMax = InData.range_max;
        ConvertUtils::SequenceToTArray<float, float>(InData.ranges._buffer, Ranges, InData.ranges._length);
        ConvertUtils::SequenceToTArray<float, float>(InData.intensities._buffer, Intensities, InData.intensities._length);
    };

    void UEToDDS (sensor_msgs_msg_LaserScan& OutData) 
    {
        Header.UEToDDS(OutData.header);
        OutData.angle_min = AngleMin;
        OutData.angle_max = AngleMax;
        OutData.angle_increment = AngleIncrement;
        OutData.time_increment = TimeIncrement;
        OutData.scan_time = ScanTime;
        OutData.range_min = RangeMin;
        OutData.range_max = RangeMax;
        OutData.ranges._length = Ranges.Num();
        OutData.ranges._buffer = dds_sequence_float_allocbuf(Ranges.Num());
        OutData.ranges._release = true;
        ConvertUtils::TArrayToSequence<float, float>(Ranges, OutData.ranges._buffer, Ranges.Num());
        OutData.intensities._length = Intensities.Num();
        OutData.intensities._buffer = dds_sequence_float_allocbuf(Intensities.Num());
        OutData.intensities._release = true;
        ConvertUtils::TArrayToSequence<float, float>(Intensities, OutData.intensities._buffer, Intensities.Num());
    };
    
    /**
     * @endcond
     */
};
/** @} */



DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FROSLaserScanCallback, const FROSLaserScan, Data);

UCLASS(BlueprintType, Blueprintable)
class MORSEROSDATAMODEL_API ULaserScan_TopicProxy : public UTopicProxy
{
    GENERATED_BODY()

public:

    UPROPERTY(BlueprintAssignable)
    FROSLaserScanCallback OnDataChanged;

    virtual void Initialize() override {
        Data = sensor_msgs_msg_LaserScan__alloc();
    };

    virtual void Terminate() override {
        sensor_msgs_msg_LaserScan_free(Data, DDS_FREE_ALL);
    };

    UFUNCTION(BlueprintCallable)
    void GetData(FROSLaserScan& Output)
    {
        Output.DDSToUE(*Data);
    };

    UFUNCTION(BlueprintCallable)
    void SetData(FROSLaserScan Input)
    {
        Input.UEToDDS(*Data);
    };

    virtual void ExecuteMessageCallback() override
    {
        FROSLaserScan NewData;
        NewData.DDSToUE(*Data);
        OnDataChanged.Broadcast(NewData);
    };

    virtual void* Get() override
    {
        return Data;
    };

    virtual const dds_topic_descriptor_t* GetTypeDesc() override
    {
        return &sensor_msgs_msg_LaserScan_desc;
    };

private:
    sensor_msgs_msg_LaserScan* Data;
};