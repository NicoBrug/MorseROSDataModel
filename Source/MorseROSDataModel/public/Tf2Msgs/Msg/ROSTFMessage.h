/*****************************************************************//**
 * Generated by Morse IDL to UE Translator.
 * @file   ROSTFMessage.h
 * @brief  File containing data structures and the definition of the message generated from the IDL.
 *         Idl Type : ROSTFMessage.idl
 *         
 * @author Nicolas B.
 * @date   December 2023
 * @copyright Copyright 2023 Nicolas Brugie. All rights reserved.
 *********************************************************************/

#pragma once 
#include "CoreMinimal.h" 
#include "Topic/TopicProxy.h"
#include "Utils/ConvertUtils.h"


#include "tf2_msgs/msg/TFMessage.h"


#include "GeometryMsgs/Msg/ROSTransformStamped.h"

#include "ROSTFMessage.generated.h" 





/** @addtogroup {NameDoxygenMessageContainer}
  * @brief {NameDoxygenMessageContainer}
  *
  * @{
  */
USTRUCT(Blueprintable)
struct FROSTFMessage
{
    GENERATED_BODY()

public:
    /**
    * @cond
    */
    FROSTFMessage()
    {

    };
    /**
     * @endcond
     */

    
    UPROPERTY(EditAnywhere)
    TArray<FROSTransformStamped> Transforms;
    

    /**
     * @cond
     */
    void DDSToUE (const tf2_msgs_msg_TFMessage& InData) 
    {
        ConvertUtils::SequenceToTArray<geometry_msgs_msg_TransformStamped, FROSTransformStamped>(InData.transforms._buffer, Transforms, InData.transforms._length);
    };

    void UEToDDS (tf2_msgs_msg_TFMessage& OutData) 
    {
        OutData.transforms._length = Transforms.Num();
        OutData.transforms._buffer = dds_sequence_geometry_msgs_msg_TransformStamped_allocbuf(Transforms.Num());
        OutData.transforms._release = true;
        ConvertUtils::TArrayToSequence<geometry_msgs_msg_TransformStamped, FROSTransformStamped>(Transforms, OutData.transforms._buffer, Transforms.Num());
    };
    
    /**
     * @endcond
     */
};
/** @} */



DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FROSTFMessageCallback, const FROSTFMessage, Data);

UCLASS(BlueprintType, Blueprintable)
class MORSEROSDATAMODEL_API UTFMessage_TopicProxy : public UTopicProxy
{
    GENERATED_BODY()

public:

    UPROPERTY(BlueprintAssignable)
    FROSTFMessageCallback OnDataChanged;

    virtual void Initialize() override {
        Data = tf2_msgs_msg_TFMessage__alloc();
    };

    virtual void Terminate() override {
        tf2_msgs_msg_TFMessage_free(Data, DDS_FREE_ALL);
    };

    UFUNCTION(BlueprintCallable)
    void GetData(FROSTFMessage& Output)
    {
        Output.DDSToUE(*Data);
    };

    UFUNCTION(BlueprintCallable)
    void SetData(FROSTFMessage Input)
    {
        Input.UEToDDS(*Data);
    };

    virtual void ExecuteMessageCallback() override
    {
        FROSTFMessage NewData;
        NewData.DDSToUE(*Data);
        OnDataChanged.Broadcast(NewData);
    };

    virtual void* Get() override
    {
        return Data;
    };

    virtual const dds_topic_descriptor_t* GetTypeDesc() override
    {
        return &tf2_msgs_msg_TFMessage_desc;
    };

private:
    tf2_msgs_msg_TFMessage* Data;
};